#!/usr/bin/env bash
# set -x # TRACE
set -euo pipefail

# https://github.com/ysoftwareab/tfrepl
# Copyright 2023- Andrei Neculau
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

TFWATCH_VSN=0.0.8

if { getopt --test >/dev/null 2>&1 && false; } || [[ "$?" = "4" ]] || false; then
  ARGS=$(getopt -o v -l version -n $(basename ${BASH_SOURCE[0]}) -- "$@")
  eval set -- "${ARGS}"
fi

while [[ $# -gt 0 ]]; do
  case "$1" in
    --version)
      echo "${TFWATCH_VSN}"
      exit
      ;;
    --)
      shift 1
      ;;
    *)
      # >&2 echo "$(basename ${BASH_SOURCE[0]}): unrecognized option '$*'"
      # exit 1
      break
      ;;
  esac
done

[[ $# -eq 1 ]] || {
  >&2 echo "[ERR ]" "One argument required: an expression to watch."
  >&2 echo "      " "e.g. 'local.myvar' or 'concat(module.foo.value, module.bar.value)'."
  exit 1
}

TFWATCH_FILE=tfwatch.tf
TFWATCH_VAR="$1"
shift

function _tfwatch_cleanup() {
  rm -rf "${TFWATCH_FILE}"
}

trap _tfwatch_cleanup EXIT

cat <<EOF > "${TFWATCH_FILE}"
locals {
  tfwatch = ${TFWATCH_VAR}
}
EOF

watch \
  --beep \
  --color \
  --differences \
  --interval 1 \
  "echo \"local.tfwatch\" | terraform console"
